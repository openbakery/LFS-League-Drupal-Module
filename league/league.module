<?php



include(drupal_get_path('module', 'league') . '/league.menu.php');
include(drupal_get_path('module', 'league') . '/league.model.php');
include(drupal_get_path('module', 'league') . '/league-common.php');
include(drupal_get_path('module', 'league') . '/league.database.php');
include(drupal_get_path('module', 'league') . '/league-results.php');
include(drupal_get_path('module', 'league') . '/league-driver.php');
//include(drupal_get_path('module', 'league') . '/league-lfsworld.php');

drupal_add_css(drupal_get_path('module', 'league') . '/league.css');




function league_permission() {
  return array(
      'access league content' => array(
        'title' => t('Access league content'),
        'description' => t('Permission to view the league contents'),
      ),
    'administer league' => array(
      'title' => t('Administer league content'),
      'description' => t('Permission to administer leagues e.g. Create new leagues and add races'),
    ),
  );  
}


function league_help($path, $arg) {
  $output = '';
  switch ($path) {
    case "admin/help#league":
      $output = t("Manage LFS Leagues");
      break;
    break;
  }
  return $output;
}





function league() {
  $leagues = _league_fetch_leagues();
  $rules = _league_fetch_rules();
  
  $content .= '<table class="league">';
  $content .= '<tr><th>' . t('Name') . '</th><th>' . t('Description') . '</th><th>' . ('Races') . '</th><th>' . ('Rules') . '</th><th>' . t('Homepage') . '</th></tr>';

  $i=0;
  foreach ($leagues as $league) {
    if ( ($i%2) == 0) {
      $content .= '<tr class="league-even">';
    } 
    else {
      $content .= '<tr class="league-odd">';
    }
    $content .= '<td>' . $league->name . '</td>';
    $content .= '<td>' . $league->description . '</td>';
    $content .= '<td>' . $rules[$league->ruleId]->name . '</td>';
    $content .= '<td>' . l("Races", "league/" . $league->id . "/races") . '</td>';
    $content .= '<td>' . l("Homepage", $league->homepage) . '</td>';
    $content .= '</tr>';
    $i++;
  }
  $content .= '</table>';
 
  return $content;
}

function league_admin() {

  $form = array();
  
  $result = db_query("SELECT id, name FROM {league_leagues}");
  $leagues = array();
  foreach ($result as $row) {
    $leagues[$row->id] = $row->name;
  }  

  $form['league_block_id'] = array(
      '#type' => 'select', 
      '#title' => t('League displayed in block'), 
      '#required' => TRUE,
      '#default_value' => variable_get('league_block_display', 1), 
      '#options' => $leagues);      
  
 
  $form['league_block_size'] = array(
    '#type' => 'textfield', 
    '#title' => t('Number of results displayed in block'), 
    '#default_value' => variable_get('league_block_size', 1), 
    '#description' => t("The number of results that should be displayed in the block."), 
    '#maxlength' => '2', '#size' => '2');
  
  $form['league_block_title'] = array(
    '#type' => 'textfield', 
    '#title' => t('Standings Block title'), 
    '#default_value' => variable_get('league_block_title', 1), 
    '#description' => t("Standings Block title."), 
    '#maxlength' => '30', '#size' => '30');
      
  $result = db_query("SELECT * FROM {profile_field}");
  $profile_fields = array();
  foreach ($result as $row) {
    $profile_fields[$row->name] = $row->title . " - (" . $row->name . ")";
  }  

  $form['league_profile_lfsworldname'] = array(
      '#type' => 'select', 
      '#title' => t('Profile field name for the lfsworld entry'),
      '#required' => TRUE,
      '#default_value' => variable_get('league_profile_lfsworldname', 1),
      '#options' => $profile_fields);      
      

  $form['league_profile_replace_list'] = array(
    '#type' => 'textfield', 
    '#title' => t('Pattern to replace the lfs world name.'), 
    '#default_value' => variable_get('league_profile_replace_list', 1), 
    '#description' => t("The profile field names must here be in {}"), 
    '#maxlength' => '200', '#size' => '100');
    
  return system_settings_form($form);
}

function league_profile_replace_list($op = 'list', $delta = 0, $edit = array()) {

  if ($op == "list") {
     $block = array();
     $block[0]["info"] = t('Standings');
     return $block;
   }
  elseif ($op == "view") {
    $block['subject'] = variable_get("league_block_title", "Standings");
    $block['content'] = league_standings_block_content();
    
    return $block;
  }
}


function league_list() {
    
  $content = '<table border="0" class="league" >';
  $content .= '<tr><th>' . t('Name') . '</th><th>' . t('Description') . '</th><th>' . t('Homepage') . '</th><th>&nbsp;</th><th>&nbsp;</th></tr>';

  $result = db_query("SELECT * FROM {league_leagues}");
    
  $i=0;
  foreach ($result as $row) {
    if ( ($i%2) == 0) {
        $tdClass = "league-even";
      } 
      else {
        $tdClass = "league-odd";
      }
      
      $line = sprintf("<tr class=\"%s\"><td>%s</td><td>%s</td><td><a href=\"%s\">%s</a></td><td><a href=\"?q=league/races/%d\">" . t('Races') . "</a></td><td><a href=\"?q=league/standings/%d\">" . t('Standings') . "</a></td></tr>\n",
        $tdClass,
        $row->name,
        $row->description,
        $row->homepage,
        $row->homepage,
        $row->id,
        $row->id
        );

      $content .= $line;
      $i++;
    }
  
  $content .= '</table>';
  return $content;
}


function league_get_result($id, $numberOfResults=-1) {
  
  $result =  db_query("SELECT * FROM {league_rules} AS rules, {league_leagues} AS leagues " .
    " WHERE leagues.id = :id AND leagues.rules_id = rules.id", array(':id' => $id));

  foreach ($result as $row) {
    $rules['main_race_points'] = explode(",", $row->main_race_points);
    $rules['main_race_fastest_lap'] = $row->main_race_fastest_lap;
    $rules['sprint_race_points'] = explode(",", $row->sprint_race_points);
    $rules['sprint_race_fastest_lap'] = $row->sprint_race_fastest_lap;
    $rules['poleposition_points'] = $row->poleposition_points;
    $rules['sprint_poleposition_points'] = $row->sprint_poleposition_points;
    $number_counting_results = $row->number_counting_results;  
  }

  if ($number_counting_results < 1) {
    $number_counting_results = 99999;
  }

  $query = "SELECT results.raceEntry_id as raceEntry_id, results.position as position, results.confirmation_flags, " .
    " drivers.lfsworld_name as lfsworld_name, results.fastest_lap as fastest_lap, results.penalty as penalty," .
    " drivers.starting_position as starting_position, entries.server as server, entries.type as type, " .
    " races.id as race_id, drivers.team_id as team_id " . 
    "FROM {league_races_entries} AS entries, {league_results} AS results, {league_drivers} AS drivers, {league_races} AS races " .
    "WHERE races.league_id = :id AND results.raceEntry_id = entries.id AND results.driver_id = drivers.id " .
    "AND races.id = entries.race_id AND entries.laps > 0 ";

 
  $result = db_query($query,  array(':id' => $id) );

  $driverResults = array();

  $bestLap = 9999999999;
  $bestLapDriverName;

  $tmpResults = array();
  $bestLap = array();
  $inResult = array();
  $hasSprint = 0;
  $raceIds = array();
  $i = 0;
    
  foreach ($result as $row) {
    $tmpResults[$i]['position'] = $row->position; 
    $tmpResults[$i]['lfsworld_name'] = strtolower($row->lfsworld_name);
    $tmpResults[$i]['team_id'] = $row->team_id;
    $tmpResults[$i]['fastest_lap'] = $row->fastest_lap;
    $tmpResults[$i]['race_id'] = $row->race_id;
    $tmpResults[$i]['type'] = $row->type;
    $tmpResults[$i]['starting_position'] = $row->starting_position;
    $tmpResults[$i]['server'] = $row->server;
    $tmpResults[$i]['penalty'] = $row->penalty;
    $tmpResults[$i]['confirmation_flags'] = $row->confirmation_flags;
    $race_key = $row->race_id . '_' . $row->server;
    if ($bestLap[$race_key] == 0 || $bestLap[$race_key] > $row->fastest_lap) {
      $bestLap[$race_key] = $row->fastest_lap;
    }
    if ( !($row->confirmation_flags&64) && !($row->confirmation_flags&128) ) {
      $inResult[$race_key] += 1;
    }
    $hasSprint += $row->sprint;
    $raceIds[$row->race_id]=0;
    $i++;
  }
  
  //print_r($tmpResults);

  $raceIds = array_keys($raceIds);


  // echo "-> RaceIds ";
  // print_r($raceIds);
  // echo "<br>InResult: ";
  // print_r($inResult);
  // echo "<br>bestLap ";
  // print_r($bestLap);

  $driverRacePoints = array();
  foreach (array_values($tmpResults) as $row) {
    $lfsWorldName = strtolower($row['lfsworld_name']);
    $standingsPosition = 0;
    $disqualifiedDrivers = 0;


    for ($i=0; $i<$row['server'];$i++) {
      $standingsPosition += $inResult[$row['race_id'] . "_" . $i];
    }

    $standingsPosition += $row['position'];

    $driverRacePoints[$lfsWorldName][$row['race_id'] . '_position'] = $row['position'];
    $driverRacePoints[$lfsWorldName][$row['race_id'] . '_server'] = $row['server'] + 1;
    $driverRacePoints[$lfsWorldName][$row['race_id'] . '_team_id'] = $row['team_id'];

    if ( !($row['confirmation_flags']&64) && !($row['confirmation_flags']&128) ) {
      if ($row['type'] == 1) {
         // is spring race
         $driverResults[$lfsWorldName] += $rules['sprint_race_points'][$standingsPosition-1];
         $driverRacePoints[$lfsWorldName][$row['race_id']] = $rules['sprint_race_points'][$standingsPosition-1];
       } 
       elseif ($row['type'] == 0) {
         // is main race
         $driverResults[$lfsWorldName] += $rules['main_race_points'][$standingsPosition-1];
         $driverRacePoints[$lfsWorldName][$row['race_id']] = $rules['main_race_points'][$standingsPosition-1];
       }
      

      } 
      else {
        $disqualifedDrivers++;
      }

      if ( $bestLap[$row['race_id'] . '_' . $row['server'] ] == $row['fastest_lap']) {
        if ($row['type'] == 1) {
           // is spring race
          $driverResults[$lfsWorldName] += $rules['sprint_race_fastest_lap'] / ($row['server']+1);
          $driverRacePoints[$lfsWorldName][$row['race_id']] += $rules['sprint_race_fastest_lap'] / ($row['server']+1);
          $driverRacePoints[$lfsWorldName][$row['race_id'] . "_fastest"] = TRUE;
        } 
        elseif ($row['type'] == 0) {
          // is main race 
          $driverResults[$lfsWorldName] += $rules['main_race_fastest_lap'] / ($row['server']+1);
          $driverRacePoints[$lfsWorldName][$row['race_id']] += $rules['main_race_fastest_lap'] / ($row['server']+1);
          $driverRacePoints[$lfsWorldName][$row['race_id'] . "_fastest"] = TRUE;
        }
      }

      if ( $row['starting_position'] == 1 && $row['type'] == 0 && $rules['poleposition_points'] > 0) {
        $driverResults[$lfsWorldName] += $rules['poleposition_points'] / ($row['server']+1);
        $driverRacePoints[$lfsWorldName][$row['race_id']] += $rules['poleposition_points'] / ($row['server']+1);
        $driverRacePoints[$lfsWorldName][$row['race_id'] . "_pole"] = TRUE;
      }
      
      if ( $row['starting_position'] == 1 && $row['type'] == 1 && $rules['sprint_poleposition_points'] > 0) {
        $driverResults[$lfsWorldName] += $rules['sprint_poleposition_points'] / ($row['server']+1);
        $driverRacePoints[$lfsWorldName][$row['race_id']] += $rules['sprint_poleposition_points'] / ($row['server']+1);
        $driverRacePoints[$lfsWorldName][$row['race_id'] . "_pole"] = TRUE;
      }
      
     
      
      if ( $row['penalty'] != 0) {
        $driverResults[$lfsWorldName] += $row['penalty'];
        $driverRacePoints[$lfsWorldName][$row['race_id']] += $row['penalty'];
        $driverRacePoints[$lfsWorldName][$row['race_id'] . "_penalty"] = TRUE;
      }
    }
  
  foreach ($driverRacePoints as $lfsWorldName => $results) {
    if (count($results) > $number_counting_results) {
      $points = array();
      foreach (array_values($raceIds) as $raceId) {
        $points[] = $results[$raceId];
      }
      rsort($points);
      
      $driverResults[$lfsWorldName]=0;
      for ($i=0; $i<$number_counting_results; $i++) {
        $driverResults[$lfsWorldName] += $points[$i];
      }
      
      // echo $sumPoints . " ==== <br/>";
      //       print_r($points);
      //       echo " --- <br/>";
      //       print_r($results);
    }
    //echo "<br><br>\n\n";
  }
  
  //print_r($driverRacePoints);

  arsort($driverResults);

  $resultArray = array();
  $resultArray['driverResults'] = $driverResults;
  $resultArray['driverRacePoints'] = $driverRacePoints;
  return $resultArray;
}


function league_driver_detail() {
  $id = intval(substr($_GET['q'], strlen('league/driver/detail/')));
  return league_get_race_driver_detail($id);
}


function league_standings_block_content() {
  
  
  $id = variable_get("league_block_id", 1);
  
  $content = '<table class="league-standings-block">';
  
  $numberOfResults = variable_get("league_block_size", 5);
  
  
  $league_values = league_admin_leagues_values($id);
  $profile_replace_string = $league_values['block_name_pattern'];

  $names = league_get_profile_names($id, $profile_replace_string);
  
  $resultArray = league_get_result($id, $numberOfResults);
  
  $driverResults = $resultArray['driverResults'];
  

  $i = 1;
  while (list($key, $result) = each($driverResults)) {
    
    if ( ($i%2) == 0) {
      $tdClass = "league-even";
    } 
    else {
      $tdClass = "league-odd";
    }
    
    if ($names) {
      $name = $names[$key];
    }
    if (!$name) {
      $name = $key;
    }

    $line = sprintf("<tr class=\"%s\"><td>%d.</td><td>%s</td><td>%s</td></tr>\n",
      $tdClass,
      $i++,
      $name,
      $result
      );

     $content .= $line;
     if ($i > $numberOfResults) {
       break;
     }
  }
  $content .= '</table>';
  
  $content .= '<div style="text-align:right; margin-right:10px"><a href="?q=league/standings/' . $id . '">' . t('more') . '</a></div>';
  return $content;
}


function league_get_profile_names($id = -1, $profile_replace_string = "") {
  //FIXME!!!
  return;
  
  $names = array();
  
  $profile_lfsworldname = strtolower(variable_get('league_profile_lfsworldname', NULL));
  
  
  
  if ($profile_replace_string == "") {
    $league_values = league_admin_leagues_values($id);
    $profile_replace_string = $league_values['name_pattern'];
    if (!$profile_replace_string) {
      $profile_replace_string = variable_get('league_profile_replace_list', NULL);
    }
  }
  
  if (!$profile_lfsworldname || !$profile_replace_string) {
    return;
  }
  
  $replaceString = preg_replace("/{\w*}/", "%s", $profile_replace_string);
  
  preg_match_all("/{(\w*)}/", $profile_replace_string, $replaceVariables, PREG_PATTERN_ORDER);
  
  $replaceVariables = $replaceVariables[1];
  $result = db_query("SELECT * FROM {profile_field}");
  
  foreach ($result as $row) {
    if (strtolower($row->name) == $profile_lfsworldname) {
      $profile_lfsworldname_fid = $row->fid;
    }
    foreach ($replaceVariables as $value) {
      if ($row->name == $value) {
        $replace[$value] = $row->fid;
      }
    }
  }
  
  $result = db_query("SELECT * FROM {profile_values}");

  $allDrivers = array();
  $allDriversReplacements = array();

  foreach ($result as $row) {
    $uid = $row->uid;
    if ($row->fid == $profile_lfsworldname_fid) {
      $allDrivers[$uid]['LFSWorldName'] = strtolower($row->value);
    } 
    else {
      foreach ($replace as $key => $value) {
       if ($row->fid == $value) {
          $allDriversReplacements[$uid][$key] = $row->value;
        }
      }
    }
  }
   
  foreach ($allDrivers as $key => $drivers) {
    $replaceArray = array();
    foreach ($replaceVariables as $value) {
      $replaceArray[] = $allDriversReplacements[$key][$value];
    }

     $name = vsprintf($replaceString, $replaceArray);
    $names[$drivers['LFSWorldName']] = new Driver($key, $name, $drivers['LFSWorldName']);
  }
  return $names;
}


